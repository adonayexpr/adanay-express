
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the requesting user is an admin.
    function isAdmin() {
      // Check if the user document exists and has the 'admin' role.
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // A user can create their own user document upon registration.
      allow create: if request.auth.uid == userId;
      
      // A user can read or update their own data.
      // An admin can read or update any user's data.
      allow read, update: if request.auth.uid == userId || isAdmin();
      
      // Only an admin can delete a user document.
      allow delete: if isAdmin();
    }

    // Rules for the 'products' collection
    match /products/{productId} {
      // Any authenticated user can read (list and get) products.
      allow read: if request.auth.uid != null;

      // Only an admin can create, update, or delete products.
      allow create, update, delete: if isAdmin();
    }

    // Rules for the 'orders' collection
    match /orders/{orderId} {
      // A user can only create an order for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;
      
      // A user can read their own orders. An admin can read any order.
      allow read: if request.auth.uid == resource.data.userId || isAdmin();
      
      // Only an admin can update an order (e.g., change its status).
      allow update: if isAdmin();
      
      // Deleting orders is not allowed to preserve history.
      allow delete: if false;
    }
  }
}
