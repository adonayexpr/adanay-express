[debug] [2025-07-20T11:41:38.462Z] ----------------------------------------------------------------------
[debug] [2025-07-20T11:41:38.466Z] Command:       /nix/store/ws50yvm6vzlzf7jzz6n7xh4szddrack1-nodejs-20.19.1/bin/node /nix/store/gv0i9ndcpzjpfi2yr06402kzy90q51ki-firebase-tools-14.10.1/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-07-20T11:41:38.468Z] CLI Version:   14.10.1
[debug] [2025-07-20T11:41:38.468Z] Platform:      linux
[debug] [2025-07-20T11:41:38.468Z] Node Version:  v20.19.1
[debug] [2025-07-20T11:41:38.469Z] Time:          Sun Jul 20 2025 11:41:38 GMT+0000 (Coordinated Universal Time)
[debug] [2025-07-20T11:41:38.469Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-07-20T11:41:38.473Z] >>> [apiv2][query] GET https://firebase-public.firebaseio.com/cli.json [none]
[debug] [2025-07-20T11:41:39.379Z] <<< [apiv2][status] GET https://firebase-public.firebaseio.com/cli.json 200
[debug] [2025-07-20T11:41:39.380Z] <<< [apiv2][body] GET https://firebase-public.firebaseio.com/cli.json {"cloudBuildErrorAfter":1594252800000,"cloudBuildWarnAfter":1590019200000,"defaultNode10After":1594252800000,"minVersion":"3.0.5","node8DeploysDisabledAfter":1613390400000,"node8RuntimeDisabledAfter":1615809600000,"node8WarnAfter":1600128000000}
[debug] [2025-07-20T11:41:40.099Z] openjdk version "21.0.7" 2025-04-15

[debug] [2025-07-20T11:41:40.102Z] OpenJDK Runtime Environment (build 21.0.7+6-nixos)
OpenJDK 64-Bit Server VM (build 21.0.7+6-nixos, mixed mode, sharing)

[debug] [2025-07-20T11:41:40.149Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-07-20T11:41:40.169Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-07-20T11:41:40.174Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-07-20T11:41:40.202Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-07-20T11:41:40.205Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-07-20T11:41:40.205Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/6630rdigdc1h6ay3q6zs9bnvj2zrs70g-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/6630rdigdc1h6ay3q6zs9bnvj2zrs70g-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-07-20T11:41:43.486Z] Jul 20, 2025 11:41:43 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:41:43 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-07-20T11:41:43.544Z] API endpoint: http:// {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://"}}
[debug] [2025-07-20T11:41:43.545Z] 127.0.0.1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"127.0.0.1:8080"}}
[debug] [2025-07-20T11:41:43.546Z] 
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-07-20T11:41:43.711Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:42:10.530Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:42:10.530Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if the requesting user is an admin\n    function isAdmin() {\n      // The user must exist and their role must be 'admin'\n      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for 'users' collection\n    match /users/{userId} {\n      // Allow users to read their own data\n      allow get: if request.auth.uid == userId;\n      // Allow admins to read/write any user document (except deleting themselves)\n      allow read, update: if isAdmin();\n      // Allow new users to create their own document during sign up\n      allow create: if request.auth.uid == userId;\n      // Admins cannot delete themselves\n      allow delete: if isAdmin() && request.auth.uid != userId;\n    }\n\n    // Rules for 'products' collection\n    match /products/{productId} {\n      // Anyone authenticated can read products\n      allow read: if request.auth != null;\n      // Only admins can create, update, delete products\n      allow write: if isAdmin();\n    }\n\n    // Rules for 'orders' collection\n    match /orders/{orderId} {\n      // Users can read their own orders and create new ones\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      allow create: if request.auth.uid == request.resource.data.userId;\n      \n      // Admins can update all orders\n      allow update: if isAdmin();\n    }\n    \n    // Rules for 'categories' collection\n    match /categories/{categoryId} {\n        // Anyone authenticated can read categories\n        allow read: if request.auth != null;\n        // Only admins can write to categories\n        allow create, update, delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:42:10.570Z] Jul 20, 2025 11:42:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:42:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:42:11.184Z] Jul 20, 2025 11:42:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:42:11 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:42:14.416Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:42:14.416Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:42:56.301Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:42:56.301Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    match /users/{userId} {\n      // Admins can read the full list of users.\n      // Individual users can read their own document.\n      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || request.auth.uid == userId;\n      \n      // Admins can create/update/delete any user.\n      // Any user can create their own document (on signup).\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || request.auth.uid == userId;\n    }\n\n    match /products/{productId} {\n      // Any authenticated user can read products.\n      allow read: if request.auth != null;\n      // Only admins can write (create, update, delete) products.\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n    \n    match /orders/{orderId} {\n      // Admins can read all orders. Users can only read their own.\n      allow read: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || request.auth.uid == resource.data.userId;\n      // Admins can update any order.\n      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n      // Users can create their own orders.\n      allow create: if request.auth.uid == request.resource.data.userId;\n      // No one can delete orders directly for data integrity.\n      allow delete: if false;\n    }\n\n    match /categories/{categoryId} {\n      // Any authenticated user can read categories.\n      allow read: if request.auth != null;\n      // Only admins can write (create, update, delete) categories.\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:42:56.315Z] Jul 20, 2025 11:42:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:42:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:42:56.500Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:42:56.503Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:43:33.633Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:43:33.635Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    match /users/{userId} {\n      // Un usuario puede leer su propio perfil. Un admin puede leer todos los perfiles.\n      allow read: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n      \n      // Cualquiera puede crear un usuario (registrarse).\n      allow create: if request.auth != null;\n\n      // Un usuario puede actualizar su propio perfil. Un admin puede actualizar cualquiera.\n      allow update, delete: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    match /products/{productId} {\n      // Cualquiera puede leer los productos.\n      allow read;\n      // Solo los admins pueden escribir en productos.\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    match /categories/{categoryId} {\n      // Cualquiera puede leer las categorías.\n      allow read;\n      // Solo los admins pueden escribir en categorías.\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    match /orders/{orderId} {\n      // Un usuario puede leer sus propios pedidos. Un admin puede leer todos.\n      allow read: if request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n      \n      // Un usuario puede crear un pedido para sí mismo.\n      allow create: if request.auth.uid == request.resource.data.userId;\n\n      // Solo un admin puede actualizar el estado de un pedido.\n      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n\n      // Nadie puede borrar pedidos.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:43:33.651Z] Jul 20, 2025 11:43:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:43:33 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:43:33.788Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:43:33.790Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:44:14.730Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:44:14.730Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is an admin by reading their document.\n    // This can be called within other rules.\n    function isUserAdmin(userId) {\n      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';\n    }\n\n    match /categories/{categoryId} {\n      // Any authenticated user can read categories.\n      allow read: if request.auth != null;\n      // Only admins can write to categories.\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid);\n    }\n\n    match /products/{productId} {\n      // Any authenticated user can read products.\n      allow read: if request.auth != null;\n      // Only admins can write to products.\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid);\n    }\n    \n    match /users/{userId} {\n        // A user can create their own user document (on signup).\n        // Any admin can create a user.\n        allow create: if request.auth.uid == userId || (request.auth != null && isUserAdmin(request.auth.uid));\n        \n        // A user can read their own data.\n        // An admin can read any user's data.\n        allow read: if request.auth.uid == userId || (request.auth != null && isUserAdmin(request.auth.uid));\n        \n        // Only an admin can update user data (like roles). A user cannot update their own role.\n        allow update: if request.auth != null && isUserAdmin(request.auth.uid);\n        \n        // Only an admin can delete a user (and not themselves).\n        allow delete: if request.auth != null && isUserAdmin(request.auth.uid) && request.auth.uid != userId;\n    }\n\n    match /orders/{orderId} {\n        // A user can create an order if the order's userId matches their own.\n        allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n        \n        // A user can read their own orders. An admin can read all orders.\n        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isUserAdmin(request.auth.uid));\n        \n        // Only an admin can update an order's status.\n        allow update: if request.auth != null && isUserAdmin(request.auth.uid);\n        \n        // No one can delete orders for data integrity.\n        allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:44:14.746Z] Jul 20, 2025 11:44:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:44:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:44:14.930Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:44:14.938Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:45:01.981Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:45:01.982Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if the user is an admin\n    function isAdmin() {\n      // Check if the user is authenticated and if their role in the 'users' collection is 'admin'\n      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'categories' collection\n    match /categories/{categoryId} {\n      // Anyone who is logged in can read categories\n      allow read: if request.auth != null;\n      // Only admins can create, update, or delete categories\n      allow write: if isAdmin();\n    }\n\n    // Rules for the 'products' collection\n    match /products/{productId} {\n      // Anyone who is logged in can read products\n      allow read: if request.auth != null;\n      // Only admins can create, update, or delete products\n      allow write: if isAdmin();\n    }\n\n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n      // Users can read their own orders. Admins can read all orders.\n      allow read: if (request.auth.uid == resource.data.userId) || isAdmin();\n      // Users can create orders for themselves.\n      allow create: if request.auth.uid == request.resource.data.userId;\n      // Only admins can update orders (e.g., change status).\n      allow update: if isAdmin();\n      // Deleting orders is not allowed for anyone.\n      allow delete: if false;\n    }\n\n    // Rules for the 'users' collection\n    match /users/{userId} {\n       // Users can read their own profile. Admins can read all profiles.\n      allow read: if request.auth.uid == userId || isAdmin();\n       // Only admins can update user roles or details.\n      allow update: if isAdmin();\n      // Only admins can create new users.\n      allow create: if isAdmin();\n      // Only admins can delete users.\n      allow delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:45:02.000Z] Jul 20, 2025 11:45:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:45:01 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:45:02.361Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:45:02.367Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:45:55.260Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:45:55.260Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Function to check if a user is an admin\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // CATEGORIES: Any authenticated user can read, only admins can write.\n    match /categories/{categoryId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n    \n    // PRODUCTS: Any authenticated user can read, only admins can write.\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n    \n    // ORDERS: Users can create and read their own orders. Admins can read/update all.\n    match /orders/{orderId} {\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if isAdmin();\n      allow delete: if false; // Orders should not be deleted\n    }\n\n    // USERS: Users can read/update their own profile. Admins can manage all users.\n    match /users/{userId} {\n      allow read: if request.auth.uid == userId || isAdmin();\n      allow create: if isAdmin();\n      allow update: if request.auth.uid == userId || isAdmin();\n      allow delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:45:55.275Z] Jul 20, 2025 11:45:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:45:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:45:55.381Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:45:55.381Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:46:41.839Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:46:41.847Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Helper function to check for admin role\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    match /users/{userId} {\n      // Any authenticated user can read their own profile. Admins can read any profile.\n      allow read: if request.auth.uid == userId || isAdmin();\n      // Only admins can create or delete users. Users can update their own data.\n      allow create: if isAdmin();\n      allow update: if request.auth.uid == userId;\n      allow delete: if isAdmin();\n    }\n\n    match /categories/{categoryId} {\n      // Any authenticated user can read categories\n      allow read: if request.auth != null;\n      // Only admins can write to categories\n      allow write: if isAdmin();\n    }\n\n    match /products/{productId} {\n      // Any authenticated user can read products\n      allow read: if request.auth != null;\n      // Only admins can write to products\n      allow write: if isAdmin();\n    }\n    \n    match /orders/{orderId} {\n        // Users can create their own orders and read them.\n        allow create, read: if request.auth.uid == request.resource.data.userId;\n        // Admins can read and update any order.\n        allow read, update: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:46:41.860Z] Jul 20, 2025 11:46:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:46:41 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:46:42.064Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:46:42.064Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:47:25.247Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:47:25.247Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if the user is an admin.\n    // It checks the 'role' field in the user's own document.\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Categories can be read by any authenticated user.\n    // Only admins can create, update, or delete categories.\n    match /categories/{categoryId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n\n    // Products can be read by any authenticated user.\n    // Only admins can create, update, or delete products.\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n\n    // Orders:\n    // - Users can read their own orders.\n    // - Users can create new orders for themselves.\n    // - Admins can read and update any order.\n    match /orders/{orderId} {\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if isAdmin();\n      allow delete: if false; // Orders should not be deleted, only cancelled.\n    }\n\n    // Users:\n    // - A user can read their own document.\n    // - Admins can read any user document.\n    // - Admins can create and update any user document.\n    match /users/{userId} {\n      allow read: if request.auth.uid == userId || isAdmin();\n      allow create: if isAdmin();\n      allow update: if isAdmin();\n      // Deletion is handled by a backend function for security, so we disallow it here.\n      allow delete: if isAdmin(); \n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:47:25.266Z] Jul 20, 2025 11:47:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:47:25 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:47:25.378Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:47:25.378Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:47:59.991Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:47:59.991Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check for admin role\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Anyone authenticated can read categories and products.\n    // Only admins can write to them.\n    match /categories/{categoryId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n\n    // Users can create their own orders and read them.\n    // Admins can read and update any order.\n    match /orders/{orderId} {\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if isAdmin();\n      allow delete: if false; // Orders should not be deleted.\n    }\n\n    // Users can read/update their own profile.\n    // Admins can read/write any user profile.\n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId || isAdmin();\n      allow create, delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:48:00.010Z] Jul 20, 2025 11:48:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:48:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:48:00.143Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:48:00.144Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:49:10.045Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:49:10.048Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Función para verificar si el usuario es un administrador.\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Por defecto, cualquier usuario autenticado puede leer todas las colecciones.\n    // Esto es necesario para que el catálogo, productos, etc., sean visibles.\n    match /{document=**} {\n      allow read: if request.auth != null;\n    }\n\n    // Solo los administradores pueden escribir (crear, editar, eliminar) en categorías.\n    match /categories/{categoryId} {\n      allow write: if isAdmin();\n    }\n\n    // Solo los administradores pueden escribir en productos.\n    match /products/{productId} {\n      allow write: if isAdmin();\n    }\n\n    // Los usuarios pueden crear sus propios pedidos.\n    // Solo los administradores pueden actualizar el estado de los pedidos.\n    match /orders/{orderId} {\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow update: if isAdmin();\n    }\n    \n    // Un usuario solo puede leer su propio documento. Nadie más.\n    // Solo los administradores pueden escribir (crear, editar) usuarios.\n    // Nota: La eliminación de usuarios desde el cliente está restringida por Firebase por seguridad.\n    match /users/{userId} {\n      allow read: if request.auth.uid == userId || isAdmin();\n      allow write: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:49:10.076Z] Jul 20, 2025 11:49:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:49:10 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:49:10.139Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:49:10.143Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:50:13.429Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:50:13.429Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Permite la lectura y escritura a cualquier usuario autenticado.\n    // Esto es para desbloquear la aplicación y solucionar el problema de permisos.\n    // Una vez que funcione, se deben aplicar reglas de seguridad más estrictas.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:50:13.442Z] Jul 20, 2025 11:50:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:50:13 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:50:13.498Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:50:13.498Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T11:51:28.998Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T11:51:28.998Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    function isAuth() {\n      return request.auth != null;\n    }\n\n    function isAdmin() {\n      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    match /users/{userId} {\n      allow read: if isAuth() && (request.auth.uid == userId || isAdmin());\n      allow write: if isAdmin();\n      allow create: if isAuth(); // Allows new user registration\n    }\n\n    match /categories/{categoryId} {\n      allow read: if isAuth();\n      allow write: if isAdmin();\n    }\n    \n    match /products/{productId} {\n      allow read: if isAuth();\n      allow write: if isAdmin();\n    }\n\n    match /orders/{orderId} {\n      allow read: if isAuth() && (request.resource.data.userId == request.auth.uid || isAdmin());\n      allow create: if isAuth();\n      allow update: if isAdmin();\n      allow delete: if false; // Users should not delete orders\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T11:51:29.011Z] Jul 20, 2025 11:51:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 11:51:29 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T11:51:29.270Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T11:51:29.280Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T12:08:19.153Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T12:08:19.153Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Función auxiliar para verificar si el usuario es administrador\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Los usuarios autenticados pueden leer productos\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n    \n    // Los usuarios autenticados pueden leer su propio perfil y los administradores pueden leer/escribir en cualquiera\n    match /users/{userId} {\n      allow read: if request.auth.uid == userId || isAdmin();\n      allow write: if isAdmin();\n    }\n\n    // Los usuarios pueden crear pedidos y leer los suyos. Los administradores pueden gestionar todos.\n    match /orders/{orderId} {\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      allow update: if isAdmin();\n      allow delete: if false; // Nadie puede borrar pedidos\n    }\n\n    // Colección 'categories' eliminada de las reglas, ya que no se usará\n    // Cualquier otra colección no definida aquí no tendrá acceso.\n  }\n}\n"}]}}
[debug] [2025-07-20T12:08:19.174Z] Jul 20, 2025 12:08:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 12:08:19 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T12:08:19.341Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T12:08:19.341Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T12:15:20.482Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T12:15:20.482Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check for admin role\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Products can be read by any authenticated user, but only modified by admins.\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n    \n    // Categories can be read by any authenticated user, but only modified by admins.\n    match /categories/{categoryId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n\n    // Users can only read their own data. Admins can read/write any user's data.\n    match /users/{userId} {\n      allow read: if request.auth.uid == userId || isAdmin();\n      allow write: if isAdmin();\n      // Allow new user creation (registration)\n      allow create: if request.auth.uid == userId;\n    }\n\n    // Users can create orders for themselves.\n    // Users can read their own orders.\n    // Admins can read and update any order.\n    match /orders/{orderId} {\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      allow update: if isAdmin();\n      allow delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T12:15:20.492Z] Jul 20, 2025 12:15:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 12:15:20 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T12:15:20.579Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T12:15:20.579Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T12:16:41.302Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T12:16:41.302Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T12:16:41.314Z] Jul 20, 2025 12:16:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 12:16:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T12:16:41.364Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T12:16:41.365Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T12:17:29.929Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T12:17:29.937Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check for admin role\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'users' collection\n    match /users/{userId} {\n      // Admins can read and write any user document\n      // Users can only read their own document\n      allow read: if isAdmin() || request.auth.uid == userId;\n      allow write: if isAdmin();\n    }\n\n    // Rules for the 'categories' collection\n    match /categories/{categoryId} {\n      // Any authenticated user can read categories\n      allow read: if request.auth != null;\n      // Only admins can write to categories\n      allow write: if isAdmin();\n    }\n\n    // Rules for the 'products' collection\n    match /products/{productId} {\n       // Any authenticated user can read products\n      allow read: if request.auth != null;\n       // Only admins can write to products\n      allow write: if isAdmin();\n    }\n\n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n      // Users can create their own orders\n      allow create: if request.auth.uid == request.resource.data.userId;\n      // Users can read their own orders. Admins can read all orders.\n      allow read: if isAdmin() || request.auth.uid == resource.data.userId;\n      // Only admins can update orders (e.g., change status)\n      allow update: if isAdmin();\n      // Deleting orders is disallowed for everyone for data integrity\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T12:17:29.948Z] Jul 20, 2025 12:17:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 12:17:29 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T12:17:30.021Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T12:17:30.025Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T12:27:41.729Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T12:27:41.729Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Función para verificar si el usuario es administrador\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Reglas para la colección 'users'\n    match /users/{userId} {\n      // El administrador puede leer a todos los usuarios\n      allow get: if isAdmin();\n      // Solo el usuario autenticado puede leer sus propios datos\n      allow get: if request.auth.uid == userId;\n      // El administrador puede listar todos los usuarios\n      allow list: if isAdmin();\n      // El administrador puede crear y actualizar usuarios\n      allow create, update: if isAdmin();\n      // El administrador puede eliminar a otros usuarios, no a sí mismo\n      allow delete: if isAdmin() && request.auth.uid != userId;\n    }\n\n    // Reglas para la colección 'categories'\n    match /categories/{categoryId} {\n      // Cualquier usuario autenticado puede leer las categorías\n      allow get, list: if request.auth != null;\n      // Solo los administradores pueden crear, actualizar o eliminar categorías\n      allow write: if isAdmin();\n    }\n    \n    // Reglas para la colección 'products'\n    match /products/{productId} {\n      // Cualquier usuario autenticado puede leer los productos\n      allow get, list: if request.auth != null;\n      // Solo los administradores pueden crear, actualizar o eliminar productos\n      allow write: if isAdmin();\n    }\n    \n    // Reglas para la colección 'orders'\n    match /orders/{orderId} {\n      // El administrador puede leer todos los pedidos\n      allow get, list: if isAdmin();\n      // El usuario puede leer sus propios pedidos\n      allow get, list: if request.auth.uid == resource.data.userId;\n      // El usuario puede crear sus propios pedidos\n      allow create: if request.auth.uid == request.resource.data.userId;\n      // Solo el administrador puede actualizar el estado de los pedidos\n      allow update: if isAdmin();\n      // Nadie puede eliminar pedidos (por seguridad de los registros)\n      allow delete: if false;\n    }\n  }\n}\n\n    "}]}}
[debug] [2025-07-20T12:27:41.761Z] Jul 20, 2025 12:27:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 12:27:41 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T12:27:41.878Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T12:27:41.886Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T12:38:30.469Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T12:38:30.469Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      // Allow read and write access to the entire database for any authenticated user.\n      // This is for development purposes and should be secured before production.\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T12:38:30.484Z] Jul 20, 2025 12:38:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 12:38:30 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T12:38:30.543Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T12:38:30.543Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T12:42:01.939Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T12:42:01.939Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check for admin role\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Users collection\n    match /users/{userId} {\n      // Admins can read/write any user document\n      // Users can only read/write their own document\n      allow read, write: if isAdmin() || request.auth.uid == userId;\n    }\n    \n    // Allow admins to list users\n    match /users/{document=**} {\n    \tallow list: if isAdmin();\n    }\n\n    // Products collection\n    match /products/{productId} {\n      // Anyone authenticated can read products\n      allow read: if request.auth != null;\n      // Only admins can create, update, delete products\n      allow write: if isAdmin();\n    }\n\n    // Categories collection\n    match /categories/{categoryId} {\n        // Anyone authenticated can read categories\n        allow read: if request.auth != null;\n        // Only admins can write to categories\n        allow write: if isAdmin();\n    }\n\n    // Orders collection\n    match /orders/{orderId} {\n      // Admins can manage all orders\n      // Users can create orders for themselves, and read their own orders.\n      allow read: if isAdmin() || request.resource.data.userId == request.auth.uid;\n      allow create: if request.resource.data.userId == request.auth.uid;\n      allow update: if isAdmin(); // Only admins can change order status\n      allow delete: if isAdmin();\n    }\n  }\n}\n\n"}]}}
[debug] [2025-07-20T12:42:01.954Z] Jul 20, 2025 12:42:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 12:42:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T12:42:02.068Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T12:42:02.075Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T12:42:51.455Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T12:42:51.455Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T12:42:51.469Z] Jul 20, 2025 12:42:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 12:42:51 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T12:42:51.530Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T12:42:51.537Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T12:49:49.912Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T12:49:49.923Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Default deny all\n    match /{document=**} {\n      allow read, write: if false;\n    }\n    \n    // Admins can do anything\n    match /{document=**} {\n      allow read, write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n    \n    // Users can read their own data\n    match /users/{userId} {\n      allow read: if request.auth != null && request.auth.uid == userId;\n    }\n    \n    // Users can read public collections\n    match /products/{productId} {\n      allow read: if request.auth != null;\n    }\n    match /categories/{categoryId} {\n      allow read: if request.auth != null;\n    }\n\n    // Users can create and manage their own orders\n    match /orders/{orderId} {\n      allow read, update: if request.auth != null && resource.data.userId == request.auth.uid;\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T12:49:49.954Z] Jul 20, 2025 12:49:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 12:49:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T12:49:50.100Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T12:49:50.100Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T13:10:36.034Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T13:10:36.035Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Regla para la configuración de la app (categorías)\n    match /app_config/{docId} {\n      allow read: if request.auth != null; // Todos los usuarios autenticados pueden leer\n      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'; // Solo admins pueden escribir\n    }\n\n    // Usuarios pueden leer su propia info y admins pueden gestionar a todos\n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId;\n      allow read, write, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Los productos pueden ser leídos por todos, pero solo los admins los pueden gestionar\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write, create, delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Los usuarios pueden crear sus propios pedidos. Admins pueden gestionar todos.\n    match /orders/{orderId} {\n      allow read, create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n  }\n}"}]}}
[debug] [2025-07-20T13:10:36.047Z] Jul 20, 2025 1:10:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 1:10:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T13:10:36.294Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T13:10:36.294Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T13:13:36.437Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T13:13:36.437Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Allow read/write access to all documents for any authenticated user.\n    // This is a permissive rule for development and prototyping.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T13:13:36.448Z] Jul 20, 2025 1:13:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 1:13:36 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T13:13:36.496Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T13:13:36.502Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T13:14:01.009Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T13:14:01.012Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Allow read/write access to all documents for any authenticated user.\n    // This is a simple rule for prototyping. For production, you should\n    // implement more granular security rules.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T13:14:01.029Z] Jul 20, 2025 1:14:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 1:14:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T13:14:01.144Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T13:14:01.144Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T18:58:01.654Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T18:58:01.655Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check for admin role\n    function isAdmin() {\n      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Helper function to check if user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    // Users can read/update their own data. Admins can read all users.\n    match /users/{userId} {\n      allow create: if isAuthenticated(); // Allow any authenticated user to create their own user document\n      allow read, update: if request.auth.uid == userId || isAdmin();\n      allow delete: if isAdmin();\n    }\n    \n    // Admins can read the full list of users\n    match /users/{document=**} {\n        allow list: if isAdmin();\n    }\n\n    // Products can be read by any authenticated user, but only modified by admins.\n    match /products/{productId} {\n      allow read: if isAuthenticated();\n      allow create, update, delete: if isAdmin();\n    }\n    \n    match /products/{document=**} {\n        allow list: if isAuthenticated();\n    }\n\n    // Orders can be created by any authenticated user.\n    // Users can only read their own orders.\n    // Admins can read and update all orders.\n    match /orders/{orderId} {\n      allow create: if isAuthenticated();\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      allow update: if isAdmin();\n      // Deleting orders is disabled for safety. Can be done via console if needed.\n      allow delete: if false; \n    }\n    \n    match /orders/{document=**} {\n        allow list: if isAdmin() || isAuthenticated();\n    }\n\n    // The counters collection is used for atomic operations (order numbers)\n    // Only allow reads/writes within transactions initiated by an authenticated user.\n    // For simplicity in this prototype, we'll allow admin read/write.\n    match /counters/{counterId} {\n        allow read, write: if isAdmin();\n        // A more secure rule would be to only allow writes within transactions.\n        // allow write: if isAuthenticated(); \n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T18:58:01.745Z] Jul 20, 2025 6:58:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 6:58:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T18:58:01.829Z] Jul 20, 2025 6:58:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 6:58:01 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-20T18:58:02.161Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T18:58:02.162Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T19:05:39.222Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T19:05:39.228Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Default rule: Allow read and write access for all authenticated users.\n    // This is a permissive rule for development and prototyping.\n    // For production, you should implement more granular security rules.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T19:05:39.240Z] Jul 20, 2025 7:05:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 7:05:39 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T19:05:39.321Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T19:05:39.325Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T19:06:38.936Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T19:06:38.937Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Default deny all reads and writes\n    match /{document=**} {\n      allow read, write: if false;\n    }\n\n    // Allow logged-in users to read and update their own user document\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n    }\n\n    // Allow admin to read all user documents\n    match /users/{userId} {\n      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Allow anyone to read products, but only admins to write\n    match /products/{productId} {\n      allow read: if true;\n      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Allow logged-in users to create orders\n    match /orders/{orderId} {\n        allow create: if request.auth != null;\n    }\n\n    // Allow users to read their own orders, and admins to read/update all orders\n    match /orders/{orderId} {\n      allow read, update: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');\n    }\n    \n    // The transaction to create an order needs to read the counter.\n    // This allows any authenticated user to read the counters collection.\n    match /counters/{counterId} {\n      allow read: if request.auth != null;\n      // Writing to counters should only happen inside a transaction when an order is created.\n      // We allow admin to write directly for maintenance.\n      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T19:06:38.947Z] Jul 20, 2025 7:06:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 7:06:38 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T19:06:39.169Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T19:06:39.169Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T19:07:50.495Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T19:07:50.495Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Regla simple para prototipado:\n    // Permite leer y escribir a cualquier usuario que haya iniciado sesión.\n    // Esto es seguro porque el acceso a la app requiere autenticación.\n    match /{document=**} {\n      allow read, write: if request.auth != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T19:07:50.513Z] Jul 20, 2025 7:07:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 7:07:50 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T19:07:50.657Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T19:07:50.662Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T19:09:47.496Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T19:09:47.501Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // WARNING: These rules are insecure and should not be used in production.\n    // They are set to be open for prototyping purposes only.\n    match /{document=**} {\n      allow read, write: if true;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T19:09:47.509Z] Jul 20, 2025 7:09:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 7:09:47 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T19:09:47.591Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T19:09:47.591Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T19:10:12.920Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T19:10:12.920Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Default deny all reads and writes\n    match /{document=**} {\n      allow read, write: if false;\n    }\n    \n    // Allow users to read their own data and admins to read all user data\n    match /users/{userId} {\n      allow get, update: if request.auth.uid == userId;\n      allow create: if request.auth.uid != null;\n      allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n    \n    // Allow any authenticated user to read products\n    // Only admins can create, update, or delete products\n    match /products/{productId} {\n      allow read: if request.auth.uid != null;\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n    \n    // Allow users to create orders\n    // Users can only read their own orders\n    // Admins can read and update all orders\n    match /orders/{orderId} {\n      allow create: if request.auth.uid != null;\n      allow read: if resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n      allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Allow authenticated users to read and write to the counters collection for transactions\n    match /counters/{counterId} {\n        allow read, write: if request.auth.uid != null;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T19:10:12.930Z] Jul 20, 2025 7:10:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 7:10:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T19:10:13.224Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T19:10:13.224Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-20T19:11:49.614Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-20T19:11:49.614Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // USERS\n    // - Allow users to read and update their own data.\n    // - Allow admins to read all user data.\n    // - Allow anyone to create a user (for registration).\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n      allow list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // PRODUCTS\n    // - Allow any authenticated user to read products.\n    // - Allow only admins to write (create, update, delete) products.\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // ORDERS\n    // - Allow any authenticated user to create an order.\n    // - Allow users to read their own orders.\n    // - Allow admins to read and update all orders.\n    match /orders/{orderId} {\n        allow create: if request.auth != null;\n        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');\n        allow update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // COUNTERS (Not used anymore, but good to have a rule)\n    // - Only admins can read/write counters.\n    match /counters/{counterId} {\n       allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-20T19:11:49.631Z] Jul 20, 2025 7:11:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 20, 2025 7:11:49 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-20T19:11:49.738Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-20T19:11:49.746Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T02:36:15.305Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T02:36:15.310Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Users can read/write their own user document, admins can read all.\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n      allow list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Products can be read by any authenticated user, but only managed by admins.\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Orders can be created by any authenticated user.\n    // Users can only read their own orders.\n    // Admins can read/write all orders.\n    match /orders/{orderId} {\n      allow create: if request.auth != null;\n      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');\n      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T02:36:15.511Z] Jul 21, 2025 2:36:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 2:36:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T02:36:15.619Z] Jul 21, 2025 2:36:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 2:36:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-21T02:36:16.106Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T02:36:16.113Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T02:37:31.779Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T02:37:31.779Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Los productos son legibles por todos para mostrar el catálogo.\n    // Solo los administradores pueden escribir (crear, editar, eliminar).\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth.token.role == 'admin';\n    }\n\n    // Reglas para la colección de usuarios.\n    match /users/{userId} {\n      // Un usuario puede crear su propio documento (esencial para el registro).\n      allow create: if request.auth.uid == userId;\n      \n      // Un usuario puede leer su propio documento.\n      // Un administrador puede leer cualquier documento de usuario.\n      allow read: if request.auth.uid == userId || request.auth.token.role == 'admin';\n\n      // Un usuario solo puede actualizar su propio documento.\n      allow update: if request.auth.uid == userId;\n\n      // Solo los administradores pueden eliminar usuarios de la base de datos.\n      allow delete: if request.auth.token.role == 'admin';\n    }\n\n    // Reglas para la colección de pedidos.\n    match /orders/{orderId} {\n      // Un usuario autenticado puede crear un pedido.\n      allow create: if request.auth != null;\n\n      // Un usuario puede leer sus propios pedidos.\n      // Un administrador puede leer y actualizar todos los pedidos.\n      allow read, update: if request.auth.uid == resource.data.userId || request.auth.token.role == 'admin';\n      \n      // Solo los administradores pueden eliminar pedidos.\n      allow delete: if request.auth.token.role == 'admin';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T02:37:31.796Z] Jul 21, 2025 2:37:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 2:37:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T02:37:31.913Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T02:37:31.916Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T02:38:42.150Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T02:38:42.150Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check for admin role\n    function isAdmin() {\n      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) && \n             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'users' collection\n    match /users/{userId} {\n      // Any authenticated user can create their own user document.\n      allow create: if request.auth != null && request.auth.uid == userId;\n      // Users can read/update their own data. Admins can read any user's data.\n      allow read, update: if request.auth.uid == userId || isAdmin();\n      // Only admins can delete users from the database.\n      allow delete: if isAdmin();\n    }\n    \n    // Rules for the 'products' collection\n    match /products/{productId} {\n      // Anyone (even unauthenticated users) can view the products.\n      allow read: if true;\n      // Only admins can create, update, or delete products.\n      allow write: if isAdmin();\n    }\n    \n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n      // Any authenticated user can create an order for themselves.\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      // Users can only read their own orders. Admins can read all orders.\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      // Only admins can update orders (e.g., change status).\n      allow update: if isAdmin();\n      // Deleting orders is not allowed to maintain history.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T02:38:42.167Z] Jul 21, 2025 2:38:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 2:38:42 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T02:38:42.368Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T02:38:42.370Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T02:40:02.081Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T02:40:02.082Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check if a user is an admin\n    function isAdmin() {\n      // Check if the user's document in the 'users' collection has the role 'admin'\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'users' collection\n    match /users/{userId} {\n      // Allow a user to read their own document\n      allow read: if request.auth != null && request.auth.uid == userId;\n      // Allow a user to create their own document (for registration)\n      allow create: if request.auth != null && request.auth.uid == userId;\n      // Allow a user to update their own document\n      allow update: if request.auth != null && request.auth.uid == userId;\n      // Allow admins to read the list of all users\n      allow list: if request.auth != null && isAdmin();\n      // Disallow deletion for now\n      allow delete: if false;\n    }\n\n    // Rules for the 'products' collection\n    match /products/{productId} {\n      // Any authenticated user can read products\n      allow read: if request.auth != null;\n      // Only admins can create, update, or delete products\n      allow write: if request.auth != null && isAdmin();\n    }\n\n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n      // An authenticated user can create an order if it's for themselves\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      // Admins can read all orders. Users can only read their own orders.\n      allow read: if request.auth != null && (isAdmin() || get(/databases/$(database)/documents/orders/$(orderId)).data.userId == request.auth.uid);\n      // Only admins can update orders (e.g., change status)\n      allow update: if request.auth != null && isAdmin();\n      // Disallow deletion of orders for now\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T02:40:02.098Z] Jul 21, 2025 2:40:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 2:40:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T02:40:02.429Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T02:40:02.438Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T02:41:16.548Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T02:41:16.548Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can read and update their own user document.\n    // New users can create their own user document.\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // Admins can read, write, and delete all products.\n    // Authenticated users can read all products.\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Users can create their own orders.\n    // Users can read their own orders.\n    // Admins can read and update all orders.\n    match /orders/{orderId} {\n      allow create: if request.auth != null;\n      allow read, update: if request.auth != null && (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' || resource.data.userId == request.auth.uid);\n    }\n\n  }\n}\n"}]}}
[debug] [2025-07-21T02:41:16.564Z] Jul 21, 2025 2:41:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 2:41:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T02:41:16.783Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T02:41:16.786Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T02:44:53.659Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T02:44:53.659Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Allow any authenticated user to read all products.\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      // Only admins can write to products.\n      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // A user can only read/update their own user document.\n    // A user can create their own document (necessary for registration).\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // Authenticated users can create orders.\n    // They can only read/update/delete their own orders.\n    // Admins can read/write all orders.\n    match /orders/{orderId} {\n      allow create: if request.auth != null;\n      allow read, update, delete: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T02:44:53.671Z] Jul 21, 2025 2:44:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 2:44:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T02:44:53.745Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T02:44:53.748Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T02:46:12.546Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T02:46:12.546Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Helper function to check for admin role\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n    \n    // USERS Collection\n    // - Allow users to create their own user document on sign up\n    // - Allow users to read and update their own document\n    // - Allow admins to read the full list of users\n    match /users/{userId} {\n      allow create: if request.auth != null;\n      allow read, update: if request.auth.uid == userId;\n      allow list: if isAdmin();\n    }\n    \n    // PRODUCTS Collection\n    // - Allow any authenticated user to read/list products\n    // - Allow only admins to write (create, update, delete) products\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if isAdmin();\n    }\n    \n    // ORDERS Collection\n    // - Allow any authenticated user to create an order\n    // - Allow users to read/update their own orders\n    // - Allow admins to read/write all orders\n    match /orders/{orderId} {\n      allow create: if request.auth != null;\n      allow read, update: if request.auth.uid == resource.data.userId || isAdmin();\n      allow delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T02:46:12.560Z] Jul 21, 2025 2:46:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 2:46:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T02:46:12.624Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T02:46:12.631Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T02:52:54.998Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T02:52:55.004Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Regla para obtener datos de un documento de usuario\n    function getUserData(userId) {\n      return get(/databases/$(database)/documents/users/$(userId)).data;\n    }\n\n    // Regla para verificar si un usuario es administrador\n    function isUserAdmin(userId) {\n      return getUserData(userId).role == 'admin';\n    }\n    \n    // Regla para verificar si el solicitante es el dueño del recurso\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    // Reglas para la colección de usuarios\n    match /users/{userId} {\n      // Un usuario puede crear su propio perfil.\n      allow create: if request.auth != null;\n      \n      // Un usuario solo puede leer y actualizar su propio perfil.\n      // Un administrador puede leer el perfil de cualquier usuario.\n      allow read, update: if request.auth != null && (isOwner(userId) || isUserAdmin(request.auth.uid));\n      \n      // Solo un administrador puede borrar un usuario (aunque la lógica de la app lo impide para sí mismo).\n      allow delete: if request.auth != null && isUserAdmin(request.auth.uid);\n    }\n\n    // Reglas para la colección de productos\n    match /products/{productId} {\n      // Cualquier usuario autenticado puede ver los productos.\n      allow read: if request.auth != null;\n      \n      // Solo los administradores pueden crear, actualizar o eliminar productos.\n      allow write: if request.auth != null && isUserAdmin(request.auth.uid);\n    }\n\n    // Reglas para la colección de pedidos\n    match /orders/{orderId} {\n      // Cualquier usuario autenticado puede crear un pedido para sí mismo.\n      allow create: if request.auth != null && isOwner(request.resource.data.userId);\n\n      // El dueño del pedido o un administrador pueden leer, actualizar o eliminar el pedido.\n      allow read, update, delete: if request.auth != null && (isOwner(resource.data.userId) || isUserAdmin(request.auth.uid));\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T02:52:55.021Z] Jul 21, 2025 2:52:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 2:52:55 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T02:52:55.096Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T02:52:55.099Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T02:53:51.904Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T02:53:51.904Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Permite que CUALQUIER usuario autenticado lea todos los productos.\n    // Solo los administradores pueden escribir (usando la verificación de rol en el lado del cliente o reglas más avanzadas).\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // CUALQUIER usuario autenticado puede leer y escribir en su PROPIO documento de usuario.\n    // Esto es lo que soluciona el problema de \"Cargando\".\n    match /users/{userId} {\n      allow read, write: if request.auth.uid == userId;\n    }\n\n    // Los usuarios pueden crear pedidos.\n    // Los usuarios pueden leer/actualizar sus propios pedidos.\n    // Los administradores pueden leer/escribir todos los pedidos.\n    match /orders/{orderId} {\n      allow create: if request.auth != null;\n      allow read, update: if request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T02:53:51.917Z] Jul 21, 2025 2:53:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 2:53:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T02:53:51.992Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T02:53:51.993Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T02:55:31.245Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T02:55:31.249Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Default-deny all access\n    match /{document=**} {\n      allow read, write: if false;\n    }\n\n    // Allow authenticated users to read and write their own user data, and create it.\n    match /users/{userId} {\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n\n    // Allow authenticated users to read products. Only admins can write.\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Allow authenticated users to create orders.\n    // Users can read/update their own orders.\n    // Admins can read/write any order.\n    match /orders/{orderId} {\n       allow create: if request.auth != null;\n       allow read, update: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T02:55:31.263Z] Jul 21, 2025 2:55:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 2:55:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T02:55:31.346Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T02:55:31.352Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-07-21T03:13:04.675Z] ----------------------------------------------------------------------
[debug] [2025-07-21T03:13:04.681Z] Command:       /nix/store/ws50yvm6vzlzf7jzz6n7xh4szddrack1-nodejs-20.19.1/bin/node /nix/store/gv0i9ndcpzjpfi2yr06402kzy90q51ki-firebase-tools-14.10.1/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-07-21T03:13:04.685Z] CLI Version:   14.10.1
[debug] [2025-07-21T03:13:04.685Z] Platform:      linux
[debug] [2025-07-21T03:13:04.685Z] Node Version:  v20.19.1
[debug] [2025-07-21T03:13:04.686Z] Time:          Mon Jul 21 2025 03:13:04 GMT+0000 (Coordinated Universal Time)
[debug] [2025-07-21T03:13:04.686Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-07-21T03:13:06.517Z] openjdk version "21.0.7" 2025-04-15
OpenJDK Runtime Environment (build 21.0.7+6-nixos)
OpenJDK 64-Bit Server VM (build 21.0.7+6-nixos, mixed mode, sharing)

[debug] [2025-07-21T03:13:06.567Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-07-21T03:13:06.609Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-07-21T03:13:06.626Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-07-21T03:13:06.661Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-07-21T03:13:06.661Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-07-21T03:13:06.664Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/6630rdigdc1h6ay3q6zs9bnvj2zrs70g-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/6630rdigdc1h6ay3q6zs9bnvj2zrs70g-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-07-21T03:13:11.775Z] Jul 21, 2025 3:13:11 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 3:13:11 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-07-21T03:13:11.856Z] API endpoint: http://127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-07-21T03:13:12.096Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T03:18:23.346Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T03:18:23.346Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Función para verificar si un usuario es administrador\n    function isAdmin(userId) {\n      return get(/databases/$(database)/documents/users/$(userId)).data.role == 'admin';\n    }\n\n    // Colección de Productos\n    match /products/{productId} {\n      // Cualquiera puede leer los productos si está autenticado.\n      allow read: if request.auth != null;\n      // Solo los administradores pueden crear, actualizar o eliminar productos.\n      allow write: if request.auth != null && isAdmin(request.auth.uid);\n    }\n\n    // Colección de Usuarios\n    match /users/{userId} {\n      // Un usuario solo puede leer y actualizar su propio documento.\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      // Un administrador puede leer la información de cualquier usuario (necesario para la gestión).\n      allow get: if request.auth != null && isAdmin(request.auth.uid);\n      // Cualquiera puede crear una cuenta (necesario para el registro).\n      allow create: if request.auth != null;\n      // Solo los administradores pueden eliminar usuarios (desde la app).\n      allow delete: if request.auth != null && isAdmin(request.auth.uid);\n    }\n\n    // Colección de Pedidos\n    match /orders/{orderId} {\n      // Un usuario autenticado puede crear un pedido.\n      allow create: if request.auth != null;\n      // Un usuario puede leer sus propios pedidos.\n      // Un administrador puede leer todos los pedidos.\n      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin(request.auth.uid));\n      // Un administrador puede actualizar cualquier pedido.\n      allow update: if request.auth != null && isAdmin(request.auth.uid);\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T03:18:23.417Z] Jul 21, 2025 3:18:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 3:18:23 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T03:18:24.235Z] Jul 21, 2025 3:18:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 3:18:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-21T03:18:26.957Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T03:18:26.958Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T03:23:12.347Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T03:23:12.368Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId;\n      allow create: if request.auth != null;\n    }\n    match /products/{productId} {\n      // Permite a cualquier usuario autenticado leer (get) Y listar (query) productos.\n      allow get, list: if request.auth != null;\n      // Solo los administradores pueden crear, actualizar o eliminar productos.\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n    match /orders/{orderId} {\n      allow create: if request.auth != null;\n      allow read, update: if request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T03:23:12.380Z] Jul 21, 2025 3:23:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 3:23:12 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T03:23:12.484Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T03:23:12.485Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T03:25:24.198Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T03:25:24.198Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // 1. PRODUCTS: Any authenticated user can read products. Only admins can write.\n    match /products/{productId} {\n      allow get, list: if request.auth != null;\n      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // 2. USERS: A user can create their own document. They can only read/update their own data.\n    // Admins can get any user's document, which is needed for other rules to check the role.\n    match /users/{userId} {\n      allow create: if request.auth != null;\n      allow read, update: if request.auth != null && request.auth.uid == userId;\n      allow get, list: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // 3. ORDERS: Authenticated users can create orders.\n    // Users can only manage their own orders. Admins can manage all orders.\n    match /orders/{orderId} {\n      allow create: if request.auth != null;\n      allow read, update, delete: if request.auth != null && (request.auth.uid == resource.data.userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T03:25:24.231Z] Jul 21, 2025 3:25:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 3:25:24 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T03:25:24.670Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T03:25:24.670Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T03:42:00.551Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T03:42:00.551Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users can read/write their own document.\n    // Admins can read any user's document (needed for get() in other rules).\n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n      allow create: if request.auth.uid == userId;\n    }\n\n    // Any authenticated user can list/read products.\n    // Only admins can write/delete products.\n    match /products/{productId} {\n      allow get, list: if request.auth != null;\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Users can create orders.\n    // Users can read their own orders.\n    // Admins can read all orders.\n    match /orders/{orderId} {\n      allow create: if request.auth != null;\n      allow read, update: if resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T03:42:00.566Z] Jul 21, 2025 3:42:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 3:42:00 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T03:42:00.937Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T03:42:00.937Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T04:34:46.400Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T04:34:46.401Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    \n    // Función para verificar si un usuario es administrador.\n    function isAdmin() {\n      // Accede al documento del usuario que hace la petición y verifica su rol.\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Reglas para la colección de Usuarios\n    match /users/{userId} {\n      // CREATE: Un usuario solo puede crear su propio documento de usuario.\n      // Esto es crucial para el flujo de registro.\n      allow create: if request.auth.uid == userId;\n\n      // READ, UPDATE: Un usuario puede leer y actualizar sus propios datos.\n      // Un administrador puede leer y actualizar los datos de cualquier usuario.\n      allow read, update: if request.auth.uid == userId || isAdmin();\n      \n      // DELETE: Solo un administrador puede eliminar usuarios.\n      allow delete: if isAdmin();\n    }\n\n    // Reglas para la colección de Productos\n    match /products/{productId} {\n      // READ: Cualquier usuario autenticado puede leer (get y list) productos.\n      allow get, list: if request.auth != null;\n\n      // WRITE (create, update, delete): Solo los administradores pueden modificar el catálogo.\n      allow write: if isAdmin();\n    }\n    \n    // Reglas para la colección de Pedidos\n    match /orders/{orderId} {\n      // CREATE: Un usuario puede crear un pedido para sí mismo.\n      allow create: if request.auth.uid == request.resource.data.userId;\n\n      // READ: Un usuario puede leer sus propios pedidos. Un admin puede leer todos los pedidos.\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      \n      // UPDATE: Solo los administradores pueden actualizar el estado de los pedidos.\n      allow update: if isAdmin();\n      \n      // DELETE: Nadie puede eliminar pedidos para mantener la integridad del historial.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T04:34:46.419Z] Jul 21, 2025 4:34:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 4:34:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T04:34:46.463Z] Jul 21, 2025 4:34:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 4:34:46 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-21T04:34:46.617Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T04:34:46.617Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T04:47:09.333Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T04:47:09.334Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    function isAdmin() {\n      // Un usuario es administrador si su documento en la colección 'users' tiene el rol 'admin'.\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    match /users/{userId} {\n      // CREATE: Un usuario puede crear su propio documento de usuario al registrarse.\n      // Esto es crucial para el flujo de registro.\n      allow create: if request.auth.uid == userId;\n\n      // READ, UPDATE: Un usuario puede leer y actualizar sus propios datos.\n      // Un administrador puede leer y actualizar los datos de cualquier usuario.\n      allow read, update: if request.auth.uid == userId || isAdmin();\n      \n      // DELETE: Solo los administradores pueden eliminar usuarios.\n      // Un usuario no puede eliminarse a sí mismo a través de una regla.\n      allow delete: if isAdmin();\n      \n      // LIST: Solo los administradores pueden listar todos los usuarios.\n      allow list: if isAdmin();\n    }\n    \n    match /products/{productId} {\n      // READ: Cualquier usuario autenticado puede leer y listar productos.\n      allow get, list: if request.auth != null;\n      \n      // WRITE: Solo los administradores pueden crear, actualizar o eliminar productos.\n      allow write: if isAdmin();\n    }\n\n    match /orders/{orderId} {\n      // CREATE: Un usuario autenticado puede crear un pedido para sí mismo.\n      allow create: if request.auth.uid == request.resource.data.userId;\n\n      // READ, LIST: Un usuario puede leer sus propios pedidos. Un administrador puede leer todos.\n      allow get, list: if request.auth.uid == resource.data.userId || isAdmin();\n      \n      // UPDATE: Solo los administradores pueden actualizar el estado de los pedidos.\n      allow update: if isAdmin();\n      \n      // DELETE: Los pedidos no se deben eliminar por reglas, se archivan cambiando el estado.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T04:47:09.349Z] Jul 21, 2025 4:47:09 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 4:47:09 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T04:47:09.561Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T04:47:09.570Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T04:48:02.777Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T04:48:02.780Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check if the requesting user is an admin\n    function isAdmin() {\n      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    match /users/{userId} {\n      // CREATE:\n      // 1. Any newly authenticated user can create their own document.\n      // 2. An existing admin can create any user document.\n      allow create: if (request.auth.uid == userId) || isAdmin();\n\n      // READ: \n      // 1. An admin can read any user document.\n      // 2. A user can read their own document.\n      allow get, list: if isAdmin() || request.auth.uid == userId;\n\n      // UPDATE:\n      // 1. An admin can update any user document.\n      // 2. A user can update their own document.\n      allow update: if isAdmin() || request.auth.uid == userId;\n\n      // DELETE:\n      // Only an admin can delete a user document (and they can't delete themselves).\n      allow delete: if isAdmin() && request.auth.uid != userId;\n    }\n\n    match /products/{productId} {\n      // Anyone authenticated can read products.\n      allow get, list: if request.auth != null;\n      // Only admins can create, update, or delete products.\n      allow create, update, delete: if isAdmin();\n    }\n\n    match /orders/{orderId} {\n        // CREATE:\n        // A user can create an order for themselves.\n      allow create: if request.auth.uid == request.resource.data.userId;\n      \n        // READ:\n        // An admin can read any order. A user can read their own orders.\n      allow get, list: if isAdmin() || request.auth.uid == resource.data.userId;\n      \n        // UPDATE:\n        // An admin can update any order.\n      allow update: if isAdmin();\n      \n        // DELETE:\n        // No one can delete orders for data integrity. They should be marked as \"Cancelled\".\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T04:48:02.800Z] Jul 21, 2025 4:48:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 4:48:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T04:48:03.221Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T04:48:03.221Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T04:48:51.647Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T04:48:51.647Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check for admin role\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'users' collection\n    match /users/{userId} {\n      // ANY authenticated user can create THEIR OWN user document upon registration.\n      // This is the key rule that fixes the registration flow.\n      allow create: if request.auth.uid == userId;\n\n      // A user can read their own document. An admin can read any user document.\n      allow read: if request.auth.uid == userId || isAdmin();\n      \n      // A user can update their own document. An admin can update any user document.\n      allow update: if request.auth.uid == userId || isAdmin();\n      \n      // Only an admin can delete a user document (for management purposes).\n      allow delete: if isAdmin();\n    }\n    \n    // Rules for the 'products' collection\n    match /products/{productId} {\n      // Any authenticated user can read products.\n      allow read: if request.auth != null;\n      \n      // Only admins can create, update, or delete products.\n      allow write: if isAdmin();\n    }\n    \n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n      // A user can read their own orders. An admin can read any order.\n      allow read: if resource.data.userId == request.auth.uid || isAdmin();\n      \n      // Any authenticated user can create a new order for themselves.\n      allow create: if request.resource.data.userId == request.auth.uid;\n      \n      // Only admins can update orders (e.g., change status, edit items).\n      allow update: if isAdmin();\n      \n      // No one can delete orders for data integrity.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T04:48:51.659Z] Jul 21, 2025 4:48:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 4:48:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T04:48:51.886Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T04:48:51.888Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T05:39:15.426Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T05:39:15.429Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user is an admin\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // USERS Collection\n    match /users/{userId} {\n      // CREATE: A user can only be created if they are the one making the request.\n      // This allows new users to create their own document upon registration.\n      allow create: if request.auth.uid == userId;\n\n      // READ: A user can read their own document. An admin can read any user's document.\n      allow get: if request.auth.uid == userId || isAdmin();\n\n      // LIST: Admins can list all users. Regular users cannot.\n      allow list: if isAdmin();\n\n      // UPDATE: A user can update their own document. An admin can update any user's document.\n      allow update: if request.auth.uid == userId || isAdmin();\n\n      // DELETE: Only an admin can delete a user document.\n      allow delete: if isAdmin();\n    }\n\n    // PRODUCTS Collection\n    match /products/{productId} {\n      // READ: Any authenticated user can read (get, list) products.\n      allow read: if request.auth != null;\n\n      // WRITE: Only admins can create, update, or delete products.\n      allow write: if isAdmin();\n    }\n\n    // ORDERS Collection\n    match /orders/{orderId} {\n        // CREATE: Any authenticated user can create an order.\n        allow create: if request.auth != null;\n        \n        // READ: A user can read their own orders. An admin can read any order.\n        allow get: if request.auth.uid == resource.data.userId || isAdmin();\n        \n        // LIST (Query): A user can query for their own orders. An admin can query all orders.\n        // This is the most important rule for the \"Mis Pedidos\" and \"Admin Pedidos\" pages.\n        allow list: if (request.query.limit <= 100 && ('userId' in request.query.filters ? request.query.filters.userId[2] == request.auth.uid : true)) || isAdmin();\n\n        // UPDATE: Only an admin can update an order's status or details.\n        allow update: if isAdmin();\n        \n        // DELETE: Deleting orders is not allowed to maintain history.\n        allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T05:39:15.468Z] Jul 21, 2025 5:39:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 5:39:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T05:39:15.530Z] Jul 21, 2025 5:39:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 5:39:15 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-21T05:39:16.020Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T05:39:16.033Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T06:06:02.089Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T06:06:02.090Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check for admin role\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'users' collection\n    match /users/{userId} {\n      // ANYONE can create a user document, but ONLY if they are creating it for THEIR OWN UID.\n      // This allows new users to register themselves.\n      allow create: if request.auth.uid == userId;\n\n      // A user can READ their own document. Admins can read any user document.\n      allow read: if request.auth.uid == userId || isAdmin();\n      \n      // A user can UPDATE their own document. Admins can update any user document.\n      allow update: if request.auth.uid == userId || isAdmin();\n\n      // Only Admins can delete user documents. A user cannot delete their own account from here.\n      allow delete: if isAdmin();\n    }\n\n    // Rules for the 'products' collection\n    match /products/{productId} {\n      // Any authenticated user can read products.\n      allow read: if request.auth != null;\n      \n      // Only admins can create, update, or delete products.\n      allow write: if isAdmin();\n    }\n\n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n      // Any authenticated user can create an order for themselves.\n      allow create: if request.auth.uid == request.resource.data.userId;\n      \n      // A user can read their own orders. An admin can read all orders.\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      \n      // Only admins can update orders (e.g., change status).\n      allow update: if isAdmin();\n      \n      // Deleting orders is not allowed. They should be archived or cancelled by status update.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T06:06:02.116Z] Jul 21, 2025 6:06:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 6:06:02 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T06:06:02.431Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T06:06:02.431Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T06:48:51.458Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T06:48:51.465Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check for admin role\n    function isAdmin() {\n      // Check if the requesting user's document has the 'admin' role.\n      // This requires a read access to one's own user document.\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'users' collection\n    match /users/{userId} {\n      // CREATE: Anyone can create their own user document upon signup.\n      // The UID in the auth token must match the document ID they are trying to create.\n      allow create: if request.auth.uid == userId;\n\n      // READ: Users can read their own data. Admins can read any user's data.\n      allow read: if request.auth.uid == userId || isAdmin();\n\n      // UPDATE: Users can update their own data. Admins can update any user's data.\n      allow update: if request.auth.uid == userId || isAdmin();\n      \n      // DELETE: Only admins can delete user documents.\n      allow delete: if isAdmin();\n    }\n    \n    // Rules for the 'products' collection\n    match /products/{productId} {\n      // READ: Any authenticated user can read the product list.\n      allow read: if request.auth != null;\n\n      // WRITE (Create, Update, Delete): Only admins can manage the product catalog.\n      allow write: if isAdmin();\n    }\n\n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n       // CREATE: Any authenticated user can create an order for themselves.\n      allow create: if request.auth.uid == request.resource.data.userId;\n\n      // READ: Users can read their own orders. Admins can read all orders.\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n\n      // UPDATE: Only admins can update the status of an order.\n      allow update: if isAdmin();\n      \n      // DELETE: Deleting orders is not allowed to maintain history.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T06:48:51.487Z] Jul 21, 2025 6:48:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 6:48:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T06:48:51.533Z] Jul 21, 2025 6:48:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 6:48:51 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-21T06:48:51.818Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T06:48:51.823Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T06:57:57.231Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T06:57:57.231Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check for admin role\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Users Collection\n    match /users/{userId} {\n      // ANYONE can create a user document IF the UID matches their own auth UID.\n      // This is secure and necessary for registration to work.\n      allow create: if request.auth.uid == userId;\n      \n      // A user can read THEIR OWN document. Admins can read any document.\n      allow read: if request.auth.uid == userId || isAdmin();\n      \n      // A user can update THEIR OWN document. Admins can update any document.\n      allow update: if request.auth.uid == userId || isAdmin();\n      \n      // Only admins can delete users. A user cannot delete their own account from here.\n      allow delete: if isAdmin();\n    }\n\n    // Products Collection\n    match /products/{productId} {\n      // Any authenticated user can read products.\n      allow read: if request.auth != null;\n      \n      // Only admins can create, update, or delete products.\n      allow write: if isAdmin();\n    }\n    \n    // Orders Collection\n    match /orders/{orderId} {\n      // A user can read THEIR OWN orders. Admins can read any order.\n      allow read: if get(/databases/$(database)/documents/orders/$(orderId)).data.userId == request.auth.uid || isAdmin();\n      \n      // A user can create an order for themselves.\n      allow create: if request.resource.data.userId == request.auth.uid;\n      \n      // Admins can update any order (e.g., change status). Users cannot update their own orders after creation.\n      allow update: if isAdmin();\n      \n      // Only admins can delete orders.\n      allow delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T06:57:57.240Z] Jul 21, 2025 6:57:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 6:57:57 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T06:57:57.686Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T06:57:57.695Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T07:07:14.732Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T07:07:14.732Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check for admin role\n    function isAdmin() {\n      // Check if the user's document exists and has the role 'admin'\n      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'users' collection\n    match /users/{userId} {\n      // ANY authenticated user can CREATE their OWN user document.\n      // This is crucial for the registration process to work.\n      allow create: if request.auth.uid == userId;\n      \n      // Users can READ their own data. Admins can read any user's data.\n      allow read: if request.auth.uid == userId || isAdmin();\n      \n      // Users can UPDATE their own data. Admins can update any user's data.\n      allow update: if request.auth.uid == userId || isAdmin();\n      \n      // Only Admins can DELETE user documents (but not their own).\n      allow delete: if isAdmin() && request.auth.uid != userId;\n    }\n\n    // Rules for the 'products' collection\n    match /products/{productId} {\n      // Any authenticated user can read products.\n      allow read: if request.auth != null;\n      // Only admins can create, update, or delete products.\n      allow write: if isAdmin();\n    }\n    \n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n      // Users can read their own orders. Admins can read all orders.\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      \n      // Users can create their own orders.\n      allow create: if request.auth.uid == request.resource.data.userId;\n      \n      // Admins can update any order (e.g., to change its status).\n      allow update: if isAdmin();\n      \n      // Only admins should be able to delete orders (optional).\n      allow delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T07:07:14.744Z] Jul 21, 2025 7:07:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 7:07:14 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T07:07:14.831Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T07:07:14.837Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T07:08:05.632Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T07:08:05.632Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Helper function to check for admin role\n    function isAdmin() {\n      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n    \n    // Helper function to check if user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n    \n    // Users Collection\n    match /users/{userId} {\n      // ANY authenticated user can create THEIR OWN user document upon registration.\n      // This is the key rule to fix the registration issue.\n      allow create: if request.auth.uid == userId;\n      \n      // A user can read their own data. An admin can read any user's data.\n      allow read: if request.auth.uid == userId || isAdmin();\n      \n      // A user can update their own data. An admin can update any user's data.\n      allow update: if request.auth.uid == userId || isAdmin();\n      \n      // Only an admin can delete a user document from Firestore.\n      allow delete: if isAdmin();\n    }\n    \n    // Products Collection\n    match /products/{productId} {\n      // Any authenticated user can view products.\n      allow read: if isAuthenticated();\n      \n      // Only admins can create, update, or delete products.\n      allow write: if isAdmin();\n    }\n    \n    // Orders Collection\n    match /orders/{orderId} {\n       // An admin can read any order.\n       // A user can only read their own orders.\n      allow read: if isAdmin() || (isAuthenticated() && resource.data.userId == request.auth.uid);\n      \n      // A user can create their own order.\n      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;\n\n      // Only an admin can update an order (e.g., change its status).\n      allow update: if isAdmin();\n      \n      // Deleting orders is not allowed for anyone, to maintain history.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T07:08:05.643Z] Jul 21, 2025 7:08:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 7:08:05 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T07:08:05.886Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T07:08:05.896Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T07:11:53.886Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T07:11:53.886Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper functions\n    function isAdmin() {\n      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    function isOwner(userId) {\n      return request.auth.uid == userId;\n    }\n\n    // USERS collection\n    match /users/{userId} {\n      // READ: A user can read their own data. An admin can read any user's data.\n      allow read: if isOwner(userId) || isAdmin();\n      \n      // CREATE: Any authenticated user can create their OWN user document.\n      allow create: if isOwner(userId);\n      \n      // UPDATE: A user can update their own data.\n      allow update: if isOwner(userId);\n\n      // DELETE: An admin can delete any user (except themselves if logic is added).\n      allow delete: if isAdmin();\n    }\n\n    // PRODUCTS collection\n    match /products/{productId} {\n      // READ: Any authenticated user can read the product list.\n      allow read: if request.auth != null;\n      \n      // WRITE: Only admins can create, update, or delete products.\n      allow write: if isAdmin();\n    }\n\n    // ORDERS collection\n    match /orders/{orderId} {\n        // READ: A user can read their own orders. An admin can read all orders.\n        allow read: if isOwner(get(/databases/$(database)/documents/orders/$(orderId)).data.userId) || isAdmin();\n\n        // CREATE: Any authenticated user can create an order for themselves.\n        allow create: if isOwner(request.resource.data.userId);\n\n        // UPDATE: Only an admin can update an order's status or details.\n        allow update: if isAdmin();\n\n        // DELETE: Deleting orders should generally be avoided, but if needed, only an admin can do it.\n        allow delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T07:11:53.899Z] Jul 21, 2025 7:11:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 7:11:53 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T07:11:54.175Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T07:11:54.175Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T07:16:34.905Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T07:16:34.905Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Regla para la colección de usuarios\n    match /users/{userId} {\n      // Un usuario puede crear su propio documento. El ID del documento debe coincidir con su UID de autenticación.\n      allow create: if request.auth != null && request.auth.uid == userId;\n\n      // Un usuario puede leer su propio documento.\n      allow read: if request.auth != null && request.auth.uid == userId;\n      \n      // Un usuario puede actualizar su propio documento.\n      allow update: if request.auth != null && request.auth.uid == userId;\n      \n      // SOLO un admin puede leer o borrar la información de otros usuarios.\n      allow list, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Regla para la colección de productos\n    match /products/{productId} {\n      // Cualquiera puede leer los productos\n      allow read: if request.auth != null;\n      \n      // Solo los administradores pueden crear, actualizar o borrar productos\n      allow write: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Regla para la colección de pedidos\n    match /orders/{orderId} {\n      // Un usuario puede crear un pedido\n      allow create: if request.auth != null;\n      \n      // Un usuario puede leer sus propios pedidos\n      // Un admin puede leer todos los pedidos\n      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');\n      \n      // Solo los administradores pueden actualizar el estado de los pedidos\n      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n      \n      // Nadie puede borrar pedidos para mantener la integridad de los datos.\n      allow delete: if false;\n    }\n  }\n}\n\n    "}]}}
[debug] [2025-07-21T07:16:34.932Z] Jul 21, 2025 7:16:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 7:16:34 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T07:16:35.193Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T07:16:35.193Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T07:25:45.412Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T07:25:45.413Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Rules for the 'users' collection\n    match /users/{userId} {\n      // Allow a user to be created only if the person creating it is the user themselves.\n      // This is the standard rule for user registration.\n      allow create: if request.auth != null && request.auth.uid == userId;\n\n      // Allow a user to read, update, or delete their own document.\n      allow read, update, delete: if request.auth != null && request.auth.uid == userId;\n    }\n\n    // Rules for the 'products' collection\n    match /products/{productId} {\n      // Anyone authenticated can view products.\n      allow read: if request.auth != null;\n      \n      // Only admins can create, update, or delete products.\n      // This assumes the user's document has a 'role' field.\n      allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n      // A user can create their own order.\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      \n      // A user can read their own orders. Admins can read any order.\n      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin');\n      \n      // Only admins can update orders (e.g., change status).\n      allow update: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n      \n      // Deleting orders is not allowed to maintain history.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T07:25:45.423Z] Jul 21, 2025 7:25:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 7:25:45 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T07:25:45.538Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T07:25:45.538Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T07:27:56.075Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T07:27:56.075Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check for admin role\n    function isAdmin() {\n      // Check if the user is authenticated and if their user document has role 'admin'\n      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // USERS collection\n    match /users/{userId} {\n      // READ: Anyone can read their own user data. Admins can read anyone's data.\n      allow read: if request.auth.uid == userId || isAdmin();\n      \n      // CREATE: A user can only create their own document.\n      allow create: if request.auth.uid == userId;\n      \n      // UPDATE: A user can only update their own document.\n      allow update: if request.auth.uid == userId;\n\n      // DELETE: Only admins can delete user documents (for management purposes).\n      allow delete: if isAdmin();\n    }\n\n    // PRODUCTS collection\n    match /products/{productId} {\n      // READ: Any authenticated user can read the product catalog.\n      allow read: if request.auth != null;\n      \n      // CREATE, UPDATE, DELETE: Only admins can manage the product catalog.\n      allow write: if isAdmin();\n    }\n\n    // ORDERS collection\n    match /orders/{orderId} {\n      // READ: Users can read their own orders. Admins can read all orders.\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      \n      // CREATE: Any authenticated user can create an order for themselves.\n      allow create: if request.auth.uid == request.resource.data.userId;\n      \n      // UPDATE: Only admins can update orders (e.g., change status).\n      // Users should not be able to modify their orders after placing them.\n      allow update: if isAdmin();\n\n      // DELETE: Deleting orders is typically not allowed. Only admins can.\n      allow delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T07:27:56.090Z] Jul 21, 2025 7:27:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 7:27:56 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T07:27:56.164Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T07:27:56.168Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T07:28:16.879Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T07:28:16.879Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check for admin role\n    function isAdmin() {\n      // Check if the user is authenticated and if their user document has role 'admin'\n      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // USERS collection\n    match /users/{userId} {\n      // READ: Anyone can read their own user data. Admins can read anyone's data.\n      allow read: if request.auth.uid == userId || isAdmin();\n      \n      // CREATE: A user can only create their own document.\n      allow create: if request.auth.uid == userId;\n      \n      // UPDATE: A user can only update their own document.\n      allow update: if request.auth.uid == userId;\n\n      // DELETE: Only admins can delete user documents (for management purposes).\n      allow delete: if isAdmin();\n    }\n\n    // PRODUCTS collection\n    match /products/{productId} {\n      // READ: Any authenticated user can read the product catalog.\n      allow read: if request.auth != null;\n      \n      // CREATE, UPDATE, DELETE: Only admins can manage the product catalog.\n      allow write: if isAdmin();\n    }\n\n    // ORDERS collection\n    match /orders/{orderId} {\n      // READ: Users can read their own orders. Admins can read all orders.\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      \n      // CREATE: Any authenticated user can create an order for themselves.\n      allow create: if request.auth.uid == request.resource.data.userId;\n      \n      // UPDATE: Only admins can update orders (e.g., change status).\n      // Users should not be able to modify their orders after placing them.\n      allow update: if isAdmin();\n\n      // DELETE: Deleting orders is typically not allowed. Only admins can.\n      allow delete: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T07:28:16.886Z] Jul 21, 2025 7:28:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 7:28:16 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T07:28:16.993Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T07:28:16.993Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T07:46:31.198Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T07:46:31.198Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n  \n    // Permite que un usuario autenticado cree su propio documento\n    match /users/{userId} {\n      allow create: if request.auth != null && request.auth.uid == userId;\n      allow read, update, delete: if request.auth != null && request.auth.uid == userId;\n    }\n    \n    // Los administradores pueden leer todos los documentos de usuario\n    match /users/{userId} {\n      allow get, list: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Cualquier usuario autenticado puede leer la lista de productos\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      // Solo los administradores pueden crear, actualizar o eliminar productos\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Un usuario solo puede crear pedidos para sí mismo\n    // Un administrador puede leer y actualizar cualquier pedido\n    match /orders/{orderId} {\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      allow read, list, update: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin' \n                                 || (request.auth != null && resource.data.userId == request.auth.uid);\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T07:46:31.211Z] Jul 21, 2025 7:46:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 7:46:31 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T07:46:31.394Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T07:46:31.401Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T08:37:19.988Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T08:37:19.989Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Users Collection\n    // - Any authenticated user can create their own user document.\n    // - Users can only read/update their own document.\n    // - Admins can read/write any user document.\n    match /users/{userId} {\n      allow read, update: if request.auth.uid == userId || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n      allow create: if request.auth.uid == userId;\n      allow delete: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Products Collection\n    // - Any authenticated user can read the product list.\n    // - Only admins can create, update, or delete products.\n    match /products/{productId} {\n      allow read: if request.auth != null;\n      allow write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Orders Collection\n    // - Users can create their own orders.\n    // - Users can read their own orders.\n    // - Admins can read/write any order.\n    match /orders/{orderId} {\n      allow read, write: if get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n      allow create: if request.auth.uid == request.resource.data.userId;\n      allow read: if request.auth.uid == resource.data.userId;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T08:37:20.181Z] Jul 21, 2025 8:37:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 8:37:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T08:37:20.446Z] Jul 21, 2025 8:37:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 8:37:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-21T08:37:20.895Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T08:37:20.895Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T11:32:38.367Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T11:32:38.367Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if a user has the 'admin' role.\n    function isAdmin() {\n      // The user must be authenticated and their document in the 'users' collection\n      // must exist and have the role property set to 'admin'.\n      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'users' collection\n    match /users/{userId} {\n      // CREATE: Anyone can create their own user document (registration).\n      // This also implicitly allows the first admin to be created.\n      allow create: if request.auth.uid == userId;\n\n      // READ: A user can read their own document. An admin can read any user's document.\n      allow get: if request.auth.uid == userId || isAdmin();\n\n      // LIST: Only admins can list all users.\n      allow list: if isAdmin();\n      \n      // UPDATE: A user can update their own data. An admin can update any user's data.\n      allow update: if request.auth.uid == userId || isAdmin();\n\n      // DELETE: Only admins can delete user documents (but not themselves).\n      allow delete: if isAdmin() && request.auth.uid != userId;\n    }\n    \n    // Rules for the 'products' collection\n    match /products/{productId} {\n      // READ/LIST: Any authenticated user can view the product catalog.\n      allow get, list: if request.auth != null;\n      \n      // CREATE, UPDATE, DELETE: Only admins can manage the product catalog.\n      allow create, update, delete: if isAdmin();\n    }\n    \n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n      // CREATE: An authenticated user can create an order for themselves.\n      // The `userId` in the new order must match the authenticated user's ID.\n      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;\n      \n      // READ/LIST: A user can see their own orders. An admin can see all orders.\n      allow get, list: if request.auth.uid == resource.data.userId || isAdmin();\n      \n      // UPDATE: Only admins can update an order's status or its contents.\n      allow update: if isAdmin();\n      \n      // DELETE: Orders should generally not be deleted.\n      // For this application, we will rely on a \"Cancelado\" or \"Archivado\" status.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T11:32:38.378Z] Jul 21, 2025 11:32:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 11:32:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T11:32:38.409Z] Jul 21, 2025 11:32:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 11:32:38 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-21T11:32:38.565Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T11:32:38.565Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T12:22:45.225Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T12:22:45.227Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n    // Helper function to check if the requesting user is an admin.\n    function isAdmin() {\n      // Check if the user document exists and has the 'admin' role.\n      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'users' collection\n    match /users/{userId} {\n      // A user can read or update their own document.\n      // An admin can read or update any user document.\n      allow read, update: if request.auth.uid == userId || isAdmin();\n\n      // Only an admin can delete a user document. A user cannot delete their own account through this rule.\n      allow delete: if isAdmin();\n      \n      // A user can only create a document for themselves.\n      // The incoming document's 'role' must be 'user' unless no users exist yet (for admin setup).\n      // This prevents users from assigning themselves the admin role.\n      allow create: if request.auth.uid == userId && \n                       (request.resource.data.role == 'user' || !exists(/databases/$(database)/documents/users/$(userId)));\n\n      // Only admins can list all users.\n      allow list: if isAdmin();\n    }\n\n    // Rules for the 'products' collection\n    match /products/{productId} {\n      // Any authenticated user can view the products.\n      allow read: if request.auth.uid != null;\n\n      // Only admins can create, update, or delete products.\n      allow write: if isAdmin();\n    }\n\n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n      // A user can create an order only for themselves.\n      allow create: if request.auth.uid == request.resource.data.userId;\n\n      // A user can read their own orders. An admin can read any order.\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      \n      // Only an admin can update an order (e.g., change its status).\n      allow update: if isAdmin();\n\n      // Admins can list all orders. Users cannot list all orders.\n      allow list: if isAdmin();\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T12:22:45.239Z] Jul 21, 2025 12:22:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 12:22:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T12:22:45.289Z] Jul 21, 2025 12:22:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 12:22:45 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected HTTP/2 connection.\n"}}
[debug] [2025-07-21T12:22:45.434Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T12:22:45.435Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[info] i  firestore: Change detected, updating rules... 
[debug] [2025-07-21T12:24:12.732Z] >>> [apiv2][query] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules [none]
[debug] [2025-07-21T12:24:12.736Z] >>> [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {"ignore_errors":true,"rules":{"files":[{"name":"security.rules","content":"\nrules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if the requesting user is an admin.\n    function isAdmin() {\n      // Check if the user document exists and has the 'admin' role.\n      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&\n             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Rules for the 'users' collection\n    match /users/{userId} {\n      // A user can create their own user document upon registration.\n      allow create: if request.auth.uid == userId;\n      \n      // A user can read or update their own data.\n      // An admin can read or update any user's data.\n      allow read, update: if request.auth.uid == userId || isAdmin();\n      \n      // Only an admin can delete a user document.\n      allow delete: if isAdmin();\n    }\n\n    // Rules for the 'products' collection\n    match /products/{productId} {\n      // Any authenticated user can read (list and get) products.\n      allow read: if request.auth.uid != null;\n\n      // Only an admin can create, update, or delete products.\n      allow create, update, delete: if isAdmin();\n    }\n\n    // Rules for the 'orders' collection\n    match /orders/{orderId} {\n      // A user can only create an order for themselves.\n      allow create: if request.auth.uid == request.resource.data.userId;\n      \n      // A user can read their own orders. An admin can read any order.\n      allow read: if request.auth.uid == resource.data.userId || isAdmin();\n      \n      // Only an admin can update an order (e.g., change its status).\n      allow update: if isAdmin();\n      \n      // Deleting orders is not allowed to preserve history.\n      allow delete: if false;\n    }\n  }\n}\n"}]}}
[debug] [2025-07-21T12:24:12.751Z] Jul 21, 2025 12:24:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 21, 2025 12:24:12 PM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-21T12:24:12.907Z] <<< [apiv2][status] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules 200
[debug] [2025-07-21T12:24:12.907Z] <<< [apiv2][body] PUT http://127.0.0.1:8080/emulator/v1/projects/demo-app:securityRules {}
[info] ✔  firestore: Rules updated. 
[debug] [2025-07-22T00:27:14.502Z] ----------------------------------------------------------------------
[debug] [2025-07-22T00:27:14.510Z] Command:       /nix/store/ws50yvm6vzlzf7jzz6n7xh4szddrack1-nodejs-20.19.1/bin/node /nix/store/gv0i9ndcpzjpfi2yr06402kzy90q51ki-firebase-tools-14.10.1/lib/node_modules/firebase-tools/lib/bin/firebase.js emulators:start --project=demo-app --only=auth,firestore
[debug] [2025-07-22T00:27:14.514Z] CLI Version:   14.10.1
[debug] [2025-07-22T00:27:14.514Z] Platform:      linux
[debug] [2025-07-22T00:27:14.514Z] Node Version:  v20.19.1
[debug] [2025-07-22T00:27:14.514Z] Time:          Tue Jul 22 2025 00:27:14 GMT+0000 (Coordinated Universal Time)
[debug] [2025-07-22T00:27:14.515Z] ----------------------------------------------------------------------
[debug] 
[debug] [2025-07-22T00:27:14.528Z] >>> [apiv2][query] GET https://firebase-public.firebaseio.com/cli.json [none]
[debug] [2025-07-22T00:27:16.659Z] <<< [apiv2][status] GET https://firebase-public.firebaseio.com/cli.json 200
[debug] [2025-07-22T00:27:16.661Z] <<< [apiv2][body] GET https://firebase-public.firebaseio.com/cli.json {"cloudBuildErrorAfter":1594252800000,"cloudBuildWarnAfter":1590019200000,"defaultNode10After":1594252800000,"minVersion":"3.0.5","node8DeploysDisabledAfter":1613390400000,"node8RuntimeDisabledAfter":1615809600000,"node8WarnAfter":1600128000000}
[debug] [2025-07-22T00:27:17.159Z] openjdk version "21.0.7" 2025-04-15

[debug] [2025-07-22T00:27:17.163Z] OpenJDK Runtime Environment (build 21.0.7+6-nixos)
OpenJDK 64-Bit Server VM (build 21.0.7+6-nixos, mixed mode, sharing)

[debug] [2025-07-22T00:27:17.200Z] Parsed Java major version: 21
[info] i  emulators: Starting emulators: firestore {"metadata":{"emulator":{"name":"hub"},"message":"Starting emulators: firestore"}}
[info] i  emulators: Detected demo project ID "demo-app", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail. {"metadata":{"emulator":{"name":"hub"},"message":"Detected demo project ID \"demo-app\", emulated services will use a demo configuration and attempts to access non-emulated services for this project will fail."}}
[warn] ⚠  auth: Not starting the auth emulator, make sure you have run firebase init. {"metadata":{"emulator":{"name":"auth"},"message":"Not starting the auth emulator, make sure you have run firebase init."}}
[warn] ⚠  hub: Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400 {"metadata":{"emulator":{"name":"hub"},"message":"Error when trying to check port 4400 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4400"}}
[warn] ⚠  hub: Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"hub"},"message":"Port 4400 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  hub: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"hub"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  ui: Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000 {"metadata":{"emulator":{"name":"ui"},"message":"Error when trying to check port 4000 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4000"}}
[warn] ⚠  ui: Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"ui"},"message":"Port 4000 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  ui: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"ui"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  logging: Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500 {"metadata":{"emulator":{"name":"logging"},"message":"Error when trying to check port 4500 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:4500"}}
[warn] ⚠  logging: Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"logging"},"message":"Port 4500 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  logging: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"logging"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore: Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 8080 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:8080"}}
[warn] ⚠  firestore: Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 8080 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[warn] ⚠  firestore.websocket: Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150 {"metadata":{"emulator":{"name":"firestore"},"message":"Error when trying to check port 9150 on ::1: Error: listen EADDRNOTAVAIL: address not available ::1:9150"}}
[warn] ⚠  firestore: Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients. {"metadata":{"emulator":{"name":"firestore"},"message":"Port 9150 is available on 127.0.0.1 but not ::1. This may cause issues with some clients."}}
[warn] ⚠  firestore: If you encounter connectivity issues, consider switching to a different port or explicitly specifying "host": "<ip address>" instead of hostname in firebase.json {"metadata":{"emulator":{"name":"firestore"},"message":"If you encounter connectivity issues, consider switching to a different port or explicitly specifying \"host\": \"<ip address>\" instead of hostname in firebase.json"}}
[debug] [2025-07-22T00:27:17.226Z] assigned listening specs for emulators {"user":{"hub":[{"address":"127.0.0.1","family":"IPv4","port":4400}],"ui":[{"address":"127.0.0.1","family":"IPv4","port":4000}],"logging":[{"address":"127.0.0.1","family":"IPv4","port":4500}],"firestore":[{"address":"127.0.0.1","family":"IPv4","port":8080}],"firestore.websocket":[{"address":"127.0.0.1","family":"IPv4","port":9150}]},"metadata":{"message":"assigned listening specs for emulators"}}
[debug] [2025-07-22T00:27:17.232Z] [hub] writing locator at /tmp/hub-demo-app.json
[debug] [2025-07-22T00:27:17.250Z] Ignoring unsupported arg: auto_download {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: auto_download"}}
[debug] [2025-07-22T00:27:17.251Z] Ignoring unsupported arg: single_project_mode_error {"metadata":{"emulator":{"name":"firestore"},"message":"Ignoring unsupported arg: single_project_mode_error"}}
[debug] [2025-07-22T00:27:17.251Z] Starting Firestore Emulator with command {"binary":"java","args":["-Dgoogle.cloud_firestore.debug_log_level=FINE","-Duser.language=en","-jar","/nix/store/6630rdigdc1h6ay3q6zs9bnvj2zrs70g-emulators/cloud-firestore-emulator-v1.19.8.jar","--host","127.0.0.1","--port",8080,"--websocket_port",9150,"--project_id","demo-app","--rules","/home/user/studio/firestore.rules","--single_project_mode",true],"optionalArgs":["port","webchannel_port","host","rules","websocket_port","functions_emulator","seed_from_export","project_id","single_project_mode"],"joinArgs":false,"shell":false,"port":8080} {"metadata":{"emulator":{"name":"firestore"},"message":"Starting Firestore Emulator with command {\"binary\":\"java\",\"args\":[\"-Dgoogle.cloud_firestore.debug_log_level=FINE\",\"-Duser.language=en\",\"-jar\",\"/nix/store/6630rdigdc1h6ay3q6zs9bnvj2zrs70g-emulators/cloud-firestore-emulator-v1.19.8.jar\",\"--host\",\"127.0.0.1\",\"--port\",8080,\"--websocket_port\",9150,\"--project_id\",\"demo-app\",\"--rules\",\"/home/user/studio/firestore.rules\",\"--single_project_mode\",true],\"optionalArgs\":[\"port\",\"webchannel_port\",\"host\",\"rules\",\"websocket_port\",\"functions_emulator\",\"seed_from_export\",\"project_id\",\"single_project_mode\"],\"joinArgs\":false,\"shell\":false,\"port\":8080}"}}
[info] i  firestore: Firestore Emulator logging to firestore-debug.log {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator logging to firestore-debug.log"}}
[debug] [2025-07-22T00:27:22.613Z] Jul 22, 2025 12:27:22 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start
INFO: Started WebSocket server on ws://127.0.0.1:9150
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 12:27:22 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketServer start\nINFO: Started WebSocket server on ws://127.0.0.1:9150\n"}}
[debug] [2025-07-22T00:27:22.724Z] API endpoint: http://127.0.0.1:8080
If you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:

   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080

If you are running a Firestore in Datastore Mode project, run:

   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080

Note: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.
Dev App Server is now running.

 {"metadata":{"emulator":{"name":"firestore"},"message":"API endpoint: http://127.0.0.1:8080\nIf you are using a library that supports the FIRESTORE_EMULATOR_HOST environment variable, run:\n\n   export FIRESTORE_EMULATOR_HOST=127.0.0.1:8080\n\nIf you are running a Firestore in Datastore Mode project, run:\n\n   export DATASTORE_EMULATOR_HOST=127.0.0.1:8080\n\nNote: Support for Datastore Mode is in preview. If you encounter any bugs please file at https://github.com/firebase/firebase-tools/issues.\nDev App Server is now running.\n\n"}}
[info] ✔  firestore: Firestore Emulator UI websocket is running on 9150. {"metadata":{"emulator":{"name":"firestore"},"message":"Firestore Emulator UI websocket is running on 9150."}}
[debug] [2025-07-22T00:27:22.797Z] Could not find VSCode notification endpoint: FetchError: request to http://localhost:40001/vscode/notify failed, reason: connect ECONNREFUSED 127.0.0.1:40001. If you are not running the Firebase Data Connect VSCode extension, this is expected and not an issue.
[info] 
┌─────────────────────────────────────────────────────────────┐
│ ✔  All emulators ready! It is now safe to connect your app. │
│ i  View Emulator UI at http://127.0.0.1:4000/               │
└─────────────────────────────────────────────────────────────┘

┌───────────┬────────────────┬─────────────────────────────────┐
│ Emulator  │ Host:Port      │ View in Emulator UI             │
├───────────┼────────────────┼─────────────────────────────────┤
│ Firestore │ 127.0.0.1:8080 │ http://127.0.0.1:4000/firestore │
└───────────┴────────────────┴─────────────────────────────────┘
  Emulator Hub host: 127.0.0.1 port: 4400
  Other reserved ports: 4500, 9150

Issues? Report them at https://github.com/firebase/firebase-tools/issues and attach the *-debug.log files.
 
[debug] [2025-07-22T06:51:17.759Z] Jul 22, 2025 6:51:17 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 6:51:17 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-07-22T06:51:18.075Z] Jul 22, 2025 6:51:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 6:51:17 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-22T06:51:18.679Z] Jul 22, 2025 6:51:18 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / 
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 6:51:18 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / \n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-07-22T06:51:18.940Z] Jul 22, 2025 6:51:18 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303db5b91b6c36b89a66cbd734cc3
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 6:51:18 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303db5b91b6c36b89a66cbd734cc3\n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-07-22T06:51:20.750Z] Jul 22, 2025 6:51:20 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 6:51:20 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-07-22T06:57:18.686Z] Jul 22, 2025 6:57:18 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed
INFO: Websocket client disconnected
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 6:57:18 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler channelClosed\nINFO: Websocket client disconnected\n"}}
[debug] [2025-07-22T07:02:44.732Z] Jul 22, 2025 7:02:44 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 7:02:44 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-07-22T07:02:44.899Z] Jul 22, 2025 7:02:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 7:02:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-22T07:02:44.999Z] Jul 22, 2025 7:02:44 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / 
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 7:02:44 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / \n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-07-22T07:02:45.065Z] Jul 22, 2025 7:02:45 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303bf48b9ee581d39a2e13e56db70
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 7:02:45 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303bf48b9ee581d39a2e13e56db70\n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-07-22T07:02:45.842Z] Jul 22, 2025 7:02:45 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 7:02:45 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-07-22T08:05:44.386Z] Jul 22, 2025 8:05:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 8:05:44 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-22T08:05:44.553Z] Jul 22, 2025 8:05:44 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / 
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 8:05:44 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / \n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-07-22T08:05:44.604Z] Jul 22, 2025 8:05:44 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303f024b09465464ab6e2579351a9
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 8:05:44 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303f024b09465464ab6e2579351a9\n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-07-22T08:05:46.463Z] Jul 22, 2025 8:05:46 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 8:05:46 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-07-22T08:06:05.294Z] Jul 22, 2025 8:06:05 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 8:06:05 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-07-22T08:19:20.048Z] Jul 22, 2025 8:19:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead
INFO: Detected non-HTTP/2 connection.
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 8:19:20 AM io.gapi.emulators.netty.HttpVersionRoutingHandler channelRead\nINFO: Detected non-HTTP/2 connection.\n"}}
[debug] [2025-07-22T08:19:20.650Z] Jul 22, 2025 8:19:20 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / 
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 8:19:20 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: Unexpected HTTP/1.x request: GET / \n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:315)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-07-22T08:19:20.684Z] Jul 22, 2025 8:19:20 AM io.grpc.netty.NettyServerTransport notifyTerminated
INFO: Transport failed
io.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303467bc47cbb5ddddfeab95a14b4
	at io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)
	at io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)
	at io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)
	at io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)
	at io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)
	at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)
	at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)
	at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)
	at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)
	at io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)
	at io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)
	at io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)
	at io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)
	at io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)
	at io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)
	at io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)
	at java.base/java.lang.Thread.run(Thread.java:1583)

 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 8:19:20 AM io.grpc.netty.NettyServerTransport notifyTerminated\nINFO: Transport failed\nio.netty.handler.codec.http2.Http2Exception: HTTP/2 client preface string missing or corrupt. Hex dump for received bytes: 16030105a8010005a40303467bc47cbb5ddddfeab95a14b4\n\tat io.netty.handler.codec.http2.Http2Exception.connectionError(Http2Exception.java:107)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.readClientPrefaceString(Http2ConnectionHandler.java:319)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler$PrefaceDecoder.decode(Http2ConnectionHandler.java:245)\n\tat io.netty.handler.codec.http2.Http2ConnectionHandler.decode(Http2ConnectionHandler.java:451)\n\tat io.netty.handler.codec.ByteToMessageDecoder.decodeRemovalReentryProtection(ByteToMessageDecoder.java:530)\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:469)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:290)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:918)\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724)\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:994)\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\n\tat java.base/java.lang.Thread.run(Thread.java:1583)\n\n"}}
[debug] [2025-07-22T08:19:20.933Z] Jul 22, 2025 8:19:20 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 8:19:20 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
[debug] [2025-07-22T08:19:40.785Z] Jul 22, 2025 8:19:40 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel
INFO: Connected to new websocket client
 {"metadata":{"emulator":{"name":"firestore"},"message":"Jul 22, 2025 8:19:40 AM com.google.cloud.datastore.emulator.firestore.websocket.WebSocketChannelHandler initChannel\nINFO: Connected to new websocket client\n"}}
